alfa.set <- c(1, 0.64, 0.25)
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Fixedpoint <- function(alfa, a, totlar){
# a is the initial value of theta
theta.iterate <- a
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
theta.new <- theta.iterate + alfa*firstd
while (abs(theta.new - theta.iterate) > totlar) {
theta.new <- theta.iterate + alfa*firstd
theta.iterate <- theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
theta.estimate <- sapply(alfa.set, FUN = function(alfa)Fixedpoint(alfa, -1, 1E-10))
Fixedpoint(1, -1, 1E-10)
system.time(Fixedpoint())
system.time(Fixedpoint(1, -1, 1E-10))
theta.estimate
Fixedpoint(0.25, -1, 1E-10)
## function to calculate the MLE of Cauchy distribution by Fisher scoring
FisherScoring <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
fisherinfor <- n/2
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
theta.new <- theta.iterate + firstd/fisherinfor
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
## use theta calculated from Fisher-scoring method as the initial value
## in the Newton-Raphson method
NewtonFisher <- function(X, a, tolar){
theta.fisher <- FisherScoring(X, a, tolar)
theta.newton <- NewtonMleCauchy(X, theta.fisher, tolar)
return(theta.newton)
}
## theta estimator at different initial value
ThetaEstimate <- function(X, Y, tolar){
fisher.estimate <- sapply(Y, FUN = function(Y)FisherScoring(X, Y,tolar))
newton.estimate <- sapply(Y, FUN = function(Y)NewtonFisher(X, Y, tolar))
return(cbind(fisher.estimate, newton.estimate))
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
ThetaEstimate(X, Y, 1E-10)
alfa.set <- c(1, 0.64, 0.25)
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Fixedpoint <- function(alfa, a, totlar){
# a is the initial value of theta
theta.iterate <- a
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
theta.new <- theta.iterate + alfa*firstd
i <-1
while (abs(theta.new - theta.iterate) > totlar && i <= 1000) {
theta.new <- theta.iterate + alfa*firstd
theta.iterate <- theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- i + 1
}
return(theta.iterate)
}
theta.estimate <- sapply(alfa.set, FUN = function(alfa)Fixedpoint(alfa, -1, 1E-10))
Fixedpoint(1, -1, 1E-10)
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
theta.estimate <- sapply(Y, FUN = function(Y) NewtonMleCauchy(X, Y, 1E-10))
sample.mean <- mean(X)
## start at sample mean
NewtonMleCauchy(X, sample.mean, 1E-10)
theta.estimate
## function to calculate the MLE of Cauchy distribution by Fisher scoring
FisherScoring <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
fisherinfor <- n/2
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- 1
while(abs(firstd) > tolar && i <= 100 ){
theta.new <- theta.iterate + firstd/fisherinfor
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- i + 1
}
return(theta.iterate)
}
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
NewtonFisher <- function(X, a, tolar){
theta.fisher <- FisherScoring(X, a, tolar)
theta.newton <- NewtonMleCauchy(X, theta.fisher, tolar)
return(theta.newton)
}
ThetaEstimate <- function(X, Y, tolar){
fisher.estimate <- sapply(Y, FUN = function(Y)FisherScoring(X, Y,tolar))
newton.estimate <- sapply(Y, FUN = function(Y)NewtonFisher(X, Y, tolar))
return(cbind(fisher.estimate, newton.estimate))
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
ThetaEstimate(X, Y, 1E-10)
## function to calculate the MLE of Cauchy distribution by Fisher scoring
FisherScoring <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
fisherinfor <- n/2
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- 1
while(abs(firstd) > tolar && i <= 50 ){
theta.new <- theta.iterate + firstd/fisherinfor
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- i + 1
}
return(theta.iterate)
}
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
## use theta calculated from Fisher-scoring method as the initial value
## in the Newton-Raphson method
NewtonFisher <- function(X, a, tolar){
theta.fisher <- FisherScoring(X, a, tolar)
theta.newton <- NewtonMleCauchy(X, theta.fisher, tolar)
return(theta.newton)
}
## theta estimator at different initial value
ThetaEstimate <- function(X, Y, tolar){
fisher.estimate <- sapply(Y, FUN = function(Y)FisherScoring(X, Y,tolar))
newton.estimate <- sapply(Y, FUN = function(Y)NewtonFisher(X, Y, tolar))
return(cbind(fisher.estimate, newton.estimate))
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
ThetaEstimate(X, Y, 1E-10)
## function to calculate the MLE of Cauchy distribution by Fisher scoring
FisherScoring <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
fisherinfor <- n/2
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- 1
while(abs(firstd) > tolar && i <= 25 ){
theta.new <- theta.iterate + firstd/fisherinfor
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- i + 1
}
return(theta.iterate)
}
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
## use theta calculated from Fisher-scoring method as the initial value
## in the Newton-Raphson method
NewtonFisher <- function(X, a, tolar){
theta.fisher <- FisherScoring(X, a, tolar)
theta.newton <- NewtonMleCauchy(X, theta.fisher, tolar)
return(theta.newton)
}
## theta estimator at different initial value
ThetaEstimate <- function(X, Y, tolar){
fisher.estimate <- sapply(Y, FUN = function(Y)FisherScoring(X, Y,tolar))
newton.estimate <- sapply(Y, FUN = function(Y)NewtonFisher(X, Y, tolar))
return(cbind(fisher.estimate, newton.estimate))
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
ThetaEstimate(X, Y, 1E-10)
## function to calculate the MLE of Cauchy distribution by Fisher scoring
FisherScoring <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
fisherinfor <- n/2
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- 1
while(abs(firstd) > tolar && i <= 25 ){
theta.new <- theta.iterate + firstd/fisherinfor
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
i <- i + 1
}
return(theta.iterate)
return(i)
}
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
## use theta calculated from Fisher-scoring method as the initial value
## in the Newton-Raphson method
NewtonFisher <- function(X, a, tolar){
theta.fisher <- FisherScoring(X, a, tolar)
theta.newton <- NewtonMleCauchy(X, theta.fisher, tolar)
return(theta.newton)
}
## theta estimator at different initial value
ThetaEstimate <- function(X, Y, tolar){
fisher.estimate <- sapply(Y, FUN = function(Y)FisherScoring(X, Y,tolar))
newton.estimate <- sapply(Y, FUN = function(Y)NewtonFisher(X, Y, tolar))
return(cbind(fisher.estimate, newton.estimate))
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
ThetaEstimate(X, Y, 1E-10)
## log-likelihood function
Loglikelihood <- function(X, theta){
n <- length(X)
sum(log(1 - cos(X - theta))) - n*log(2*pi)
}
X <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
theta <- seq(-pi, pi, by = 0.01)
plot(theta, sapply(theta, FUN=function(theta) Loglikelihood(X, theta)), type="l")
theta
X <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
xmean <- mean(X)
theta.moment <- asin(xmean)
theta.moment <- asin(xmean - pi)
X <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
## Q2 (b)
xmean <- mean(X)
theta.moment <- asin(xmean - pi)
NewtonMethod <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- sum(sin(X - theta.iterate)/(cos(X - theta.iterate) - 1))
while(abs(firstd) > tolar ){
secondd <- sum(1/(cos(X - theta.iterate) - 1))
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- sum(sin(X - theta.iterate)/(cos(X - theta.iterate) - 1))
}
return(theta.iterate)
}
NewtonMethod(X, theta.moment, 1E-10)
theta.estimate.d1 <- NewtonMethod(X, -2.7, 1E-10)
theta.c <- NewtonMethod(X, theta.moment, 1E-10)
theta.d1 <- NewtonMethod(X, -2.7, 1E-10)
theta.d2 <- NewtonMethod(X, 2.7, 1e-10)
help(seq)
initialvalue <- seq(-pi, pi, length.out = 200)
theta.set <- sapply(initialvalue, FUN = function(initialvalue)NewtonMethodX, initialvalue, 1E-10)
X <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
## Q2 (b)
xmean <- mean(X)
theta.moment <- asin(xmean - pi)
NewtonMethod <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- sum(sin(X - theta.iterate)/(cos(X - theta.iterate) - 1))
while(abs(firstd) > tolar ){
secondd <- sum(1/(cos(X - theta.iterate) - 1))
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- sum(sin(X - theta.iterate)/(cos(X - theta.iterate) - 1))
}
return(theta.iterate)
}
theta.c <- NewtonMethod(X, theta.moment, 1E-10)
theta.d1 <- NewtonMethod(X, -2.7, 1E-10)
theta.d2 <- NewtonMethod(X, 2.7, 1e-10)
initialvalue <- seq(-pi, pi, length.out = 200)
theta.set <- sapply(initialvalue, FUN = function(initialvalue)NewtonMethodX, initialvalue, 1E-10)
theta.set <- sapply(initialvalue, FUN = function(initialvalue)NewtonMethod(X, initialvalue, 1E-10)
theta.set <- sapply(initialvalue,
FUN = function(initialvalue)NewtonMethod(X, initialvalue, 1E-10))
theta.set <- sapply(initialvalue,
FUN = function(initialvalue) NewtonMethod(X, initialvalue, 1E-10))
theta.set
?? split
split(initialvalue, NewtonMethod(X, initialvalue, 1E-10))
split(initialvalue, theta.set)
teat <- split(initialvalue, theta.set)
View(teat)
theta.set
theta.set <- sapply(initialvalue,
FUN = function(initialvalue) NewtonMethod(X, initialvalue, 5))
teat <- split(initialvalue, theta.set)
theta.set <- sapply(initialvalue,
FUN = function(initialvalue) NewtonMethod(X, initialvalue, 1E-10))
teat <- split(initialvalue, theta.set)
View(teat)
View(teat)
View(teat)
theta.set <- sapply(initialvalue,
teat <- split(initialvalue, theta.set)
theta.set <- sapply(initialvalue, FUN = function(initialvalue)
round(NewtonMethod(X, initialvalue, 1E-10), 4))
theta.set <- round(sapply(initialvalue, FUN = function(initialvalue)
NewtonMethod(X, initialvalue, 1E-10)), 4)
theta.set <- round(sapply(initialvalue, FUN = function(initialvalue)
NewtonMethod(X, initialvalue, 1E-10)), 4)
theta.set <- round(sapply(initialvalue, FUN = function(initialvalue)NewtonMethod(X, initialvalue, 1E-10)), 4)
View(teat)
round()
theta.set
theta.set <- round(sapply(initialvalue,
FUN = function(initialvalue)
NewtonMethod(X, initialvalue, 1E-10)), 4)
teat <- split(initialvalue, theta.set)
View(teat)
test <- split(initialvalue, theta.set)
View(test)
View(teat)
test
help(do.call)
do.call(rbind, test)
initialvalue <- seq(-pi, pi, length.out = 200)
theta.set <- round(sapply(initialvalue,
FUN = function(initialvalue)
NewtonMethod(X, initialvalue, 1E-10)), 4)
test <- split(initialvalue, theta.set)
View(test)
test[["-3.1125"]]
table
test <- vector(split(initialvalue, theta.set))
## function to calculate the MLE of Cauchy distribution by Newton-Raphson method
NewtonMleCauchy <- function(X, a, tolar){
# X is vector of observed sample
# a is the start value
n <- length(X)
theta.iterate <- a
#calculate the first derivate of log likelyhood of Cauchy distribution
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
while(abs(firstd) > tolar ){
secondd <- (-2)*sum(((1 - (theta.iterate - X)^2)/(1 + (theta.iterate - X)^2))^2)
theta.new <- theta.iterate - firstd/secondd
theta.iterate <-theta.new
firstd <- (-2)*sum((theta.iterate - X)/(1 + (theta.iterate - X)^2))
}
return(theta.iterate)
}
X <- c(1.77, -0.23, 2.76, 3.80, 3.47, 56.75, -1.34, 4.24, -2.44,
3.29, 3.71, -2.40, 4.53, -0.07, -1.05, -13.87, -2.53, -1.75)
Y <- c(-11, -1, 0, 1.5, 4, 4.7, 7, 8, 38)
theta.estimate <- sapply(Y, FUN = function(Y) NewtonMleCauchy(X, Y, 1E-10))
sample.mean <- mean(X)
## start at sample mean
NewtonMleCauchy(X, sample.mean, 1E-10)
knitr::opts_chunk$set(echo = TRUE)
